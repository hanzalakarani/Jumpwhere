#1
dict1 = {'a': 1, 'b': 2, 'c': 3, 'd': 4}
sorted_dict1_asc = {k: v for k, v in sorted(dict1.items(), key=lambda item: item[1])}
print("Sorted dictionary in ascending order: ", sorted_dict1_asc)
sorted_dict1_desc = {k: v for k, v in sorted(dict1.items(), key=lambda item: item[1], reverse=True)}
print("Sorted dictionary in descending order: ", sorted_dict1_desc)

#2
dict1 = {0: 10, 1: 20}
dict1[2] = 30
print("Updated dictionary: ", dict1)

#3
dic1 = {1: 10, 2: 20}
dic2 = {3: 30, 4: 40}
dic3 = {5: 50, 6: 60}
result = {**dic1, **dic2, **dic3}
print("Concatenated dictionary: ", result)

#4
my_dict = {1: 10, 2: 20, 3: 30}
def key_exists(dictionary, key):
    return key in dictionary
key_to_check = 2
if key_exists(my_dict, key_to_check):
    print(f"Key {key_to_check} exists in the dictionary.")
else:
    print(f"Key {key_to_check} does not exist in the dictionary.")

#5
my_dict = {
    "apple": 5,
    "banana": 3,
    "cherry": 10,
}
for key in my_dict.keys():
    print(f"Key: {key}")
for value in my_dict.values():
    print(f"Value: {value}")
for key, value in my_dict.items():
    print(f"Key: {key}, Value: {value}")

#6
def generate_dict(n):
    return {x: x*x for x in range(1, n+1)}
n = 5
result = generate_dict(n)
print(result)

#7
dict1 = {"a": 1, "b": 2}
dict2 = {"c": 3, "d": 4}
merged_dict = {**dict1, **dict2}
print(merged_dict)

#8
my_dict = {"a": 1, "b": 2, "c": 3, "d": 4}
total = sum(my_dict.values())
print("The total of all items in the dictionary is:", total)

#9
my_dict = {"a": 1, "b": 2, "c": 3, "d": 4}
product = 1
for key in my_dict:
    product *= my_dict[key]
print("The product of all items in the dictionary is:", product)

#10
my_dict = {"a": 1, "b": 2, "c": 3, "d": 4}
key_to_remove = "b"
if key_to_remove in my_dict:    
    del my_dict[key_to_remove]
    print(f"The key '{key_to_remove}' has been removed from the dictionary.")
else:
    print(f"The key '{key_to_remove}' is not in the dictionary.")
print("Updated dictionary:", my_dict)

#11
def sort_dict_by_key(input_dict):
    sorted_dict = dict(sorted(input_dict.items()))
    return sorted_dict
d = {'b': 200, 'a': 100, 'c': 300}
sorted_d = sort_dict_by_key(d)
print(sorted_d)

#12
def max_min_dict_values(input_dict):
    if not input_dict:
        return None, None
    max_value = max(input_dict.values())
    min_value = min(input_dict.values())
    return max_value, min_value
d = {'a': 100, 'b': 200, 'c': 50}
max_val, min_val = max_min_dict_values(d)
print(f"Maximum value: {max_val}, Minimum value: {min_val}")

#13
def remove_duplicates(input_dict):
    unique_dict = {}
    for key, value in input_dict.items():
        if value not in unique_dict.values():
            unique_dict[key] = value
    return unique_dict
d = {'a': 100, 'b': 200, 'c': 100, 'd': 300}
unique_d = remove_duplicates(d)
print(unique_d)

#14
def is_dict_empty(input_dict):
    return not bool(input_dict)
d = {}
is_empty = is_dict_empty(d)
print(f"Is the dictionary empty? {is_empty}")

#15
d1 = {'a': 100, 'b': 200, 'c': 300}
d2 = {'a': 300, 'b': 200, 'd': 400}
combined_dict = {}
for key, value in d1.items():
    combined_dict[key] = combined_dict.get(key, 0) + value
for key, value in d2.items():
    combined_dict[key] = combined_dict.get(key, 0) + value
print(combined_dict)

#16
def highest_3_values(input_dict):
    sorted_items = sorted(input_dict.items(), key=lambda x: x[1], reverse=True)
    top_3 = sorted_items[:3]
    return dict(top_3)
d = {'a': 100, 'b': 300, 'c': 200, 'd': 400}
highest_values = highest_3_values(d)
print(highest_values)

#17
def match_key_values(dict1, dict2):
    common_keys = set(dict1.keys()) & set(dict2.keys())
    for key in common_keys:
        if dict1[key] == dict2[key]:
            print(f"{key}: {dict1[key]} is present in both x and y")
x = {'key1': 1, 'key2': 3, 'key3': 2}
y = {'key1': 1, 'key2': 2}
match_key_values(x, y)

#18
def are_all_dicts_empty(list_of_dicts):
    return all(not d for d in list_of_dicts)
list1 = [{}, {}, {}]
list2 = [{1, 2}, {}, {}]
print(are_all_dicts_empty(list1)) 
print(are_all_dicts_empty(list2)) 

#19
def remove_duplicates_from_list_of_lists(lst):
    seen = set()
    result = []
    for sublist in lst:
        if tuple(sublist) not in seen:
            result.append(sublist)
            seen.add(tuple(sublist))
    return result
my_list = [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]
new_list = remove_duplicates_from_list_of_lists(my_list)
print(new_list)

#20
def extend_list_without_append(list1, list2):
    list1[:0] = list2
list1 = [10, 20, 30]
list2 = [40, 50, 60]
extend_list_without_append(list1, list2)
print(list1)










