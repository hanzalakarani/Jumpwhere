#1
class RomanNumerals:
    def __init__(self, value):
        self.value = value
    def to_roman(self):
        roman_numerals = {
            1000: "M",
            900: "CM",
            500: "D",
            400: "CD",
            100: "C",
            90: "XC",
            50: "L",
            40: "XL",
            10: "X",
            9: "IX",
            5: "V",
            4: "IV",
            1: "I",
        }
        roman_numeral = ""
        for numeral, value in roman_numerals.items():
            while self.value >= value:
                roman_numeral += value
                self.value -= value
        return roman_numeral
    def to_integer(self):
        roman_numerals = {
            "M": 1000,
            "CM": 900,
            "D": 500,
            "CD": 400,
            "C": 100,
            "XC": 90,
            "L": 50,
            "XL": 40,
            "X": 10,
            "IX": 9,
            "V": 5,
            "IV": 4,
            "I": 1,
        }
        integer = 0
        for numeral, value in roman_numerals.items():
            while self.value.startswith(numeral):
                integer += value
                self.value = self.value[len(numeral) :]
        return integer
roman_numerals = RomanNumerals(123)
print(roman_numerals.to_roman())  
roman_numerals = RomanNumerals("CXXIII")
print(roman_numerals.to_integer())  

#2
class ParenthesisValidator:
    def __init__(self, string):
        self.string = string
        self.stack = []
    def is_valid(self):
        for char in self.string:
            if char in ["(", "{", "["]:
                self.stack.append(char)
            elif char in [")", "}", "]"]:
                if len(self.stack) == 0 or self.stack.pop() != char:
                    return False

        return len(self.stack) == 0
parenthesis_validator = ParenthesisValidator("()")
print(parenthesis_validator.is_valid()) 
parenthesis_validator = ParenthesisValidator("({[]})")
print(parenthesis_validator.is_valid())  
parenthesis_validator = ParenthesisValidator("[)")
print(parenthesis_validator.is_valid())

#3
class Subsets:
    def __init__(self, set):
        self.set = set
    def get_subsets(self):
        subsets = [[]]
        for i in range(1, len(self.set) + 1):
            combinations = itertools.combinations(self.set, i)
            subsets.extend(list(combinations))
        return subsets

#4
class PairSum:
    def __init__(self, numbers, target):
        self.numbers = numbers
        self.target = target
    def find_pair(self):
        for i in range(len(self.numbers)):
            for j in range(i + 1, len(self.numbers)):
                if self.numbers[i] + self.numbers[j] == self.target:
                    return i, j
        return None

#5
class ThreeSum:
    def __init__(self, numbers):
        self.numbers = numbers
    def find_triplets(self):
        triplets = []
        for i in range(len(self.numbers)):
            for j in range(i + 1, len(self.numbers)):
                for k in range(j + 1, len(self.numbers)):
                    if self.numbers[i] + self.numbers[j] + self.numbers[k] == 0:
                        triplets.append([self.numbers[i], self.numbers[j], self.numbers[k]])
        return triplets

#6
class Power:
    def __init__(self, x, n):
        self.x = x
        self.n = n
    def pow(self):
        if self.n == 0:
            return 1
        elif self.n < 0:
            return 1 / self.pow(self.x, -self.n)
        else:
            result = 1
            while self.n > 0:
                if self.n % 2 == 1:
                    result *= self.x
                self.x *= self.x
                self.n //= 2
            return result

#7
class ReverseString:
    def __init__(self, string):
        self.string = string
    def reverse_words(self):
        words = self.string.split()
        words.reverse()
        return ' '.join(words)

#8
class StringReversal:
    def __init__(self):
        self.string = ""
    def get_string(self):
        self.string = input("Enter a string: ")
    def print_string(self):
        print("The reversed string is:", self.string[::-1])

#9
class Circle:
    def __init__(self, radius):
        self.radius = radius
    def area(self):
        return math.pi * self.radius ** 2
    def perimeter(self):
        return 2 * math.pi * self.radius

#10
class MyClass:
    def __init__(self, name):
        self.name = name
    def get_class_name(self):
        return self.__class__.__name__
my_instance = MyClass("MyInstance")
print(my_instance.get_class_name())  

